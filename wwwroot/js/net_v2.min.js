var svg, w, h; function net_plot(e) { var t = e; w = 800, h = 600; var n = null, r = null, s = d3.scale.linear().domain([0, .5, 1]).range(["lime", "yellow", "red"]), l = "#18ff03", o = .1, i = d3.scale.pow().exponent(1).domain([1, 100]).range([8, 24]), a = 10, u = -1, c = "#7C7C7C"; svg = d3.select("#network_plot").append("svg"); var d = d3.behavior.zoom().scaleExtent([.1, 7]).on("zoom", function () { y = 1, 1 * d.scale() > 15 && (y = 15 / d.scale()), K.style("stroke-width", y); var e = 8; 8 * d.scale() > 18 && (e = 18 / d.scale()), K.attr("d", d3.svg.symbol().size(function (e) { return 20 * ((e.score - A) / (F - A) + 1) }).type(function (e) { return e.type })), L.attr("dx", function (t) { return i(t.size) * e / 8 || e }); var t = 10; 10 * d.scale() > 14 && (t = 14 / d.scale()), L.style("font-size", t + "px"), f.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")") }); svg.call(d); var f = svg.append("g"); svg.style("cursor", "move"); var y = 1, g = f.append("g"), v = f.append("g"), x = parseInt($("#text-box_genes-range").val()); x = parseInt($("#genes-range").val()) <= Object.keys(t.results).length ? parseInt($("#genes-range").val()) : Object.keys(t.results).length; for (var p = [], k = 0, m = 0; m < x; m++) { for (var b = 3; b < x + 3; b++)k += t.results[m][b]; p.push(k), k = 0 } var _, z = '{"nodes" : ['; for (m = 0; m < x - 1; m++)z += '{"id" : "' + t.results[m][0] + '", "id_node" : "node_' + m + '", "score" : ' + (p[m] + 5) + ', "module": "' + t.results[m][2] + '", "type": "circle"},'; z += '{"id" : "' + t.results[x - 1][0] + '", "id_node" : "node_' + (x - 1) + '", "score" : ' + p[x - 1] + ', "module": "' + t.results[x - 1][2] + '", "type": "circle"}],'; var N = '"links" : ['; for (m = 0; m < x; m++) { _ = !1; for (b = 0; b < x + 3; b++)_ && (t.results[m][b] < a && (a = t.results[m][b]), t.results[m][b] > u && (u = t.results[m][b]), t.results[m][b] > 0 && (N += '{"source":' + m + ',"target":' + (b - 3) + ',"value":' + t.results[m][b] + "},")), 1 == t.results[m][b] && (_ = !0) } N = N.substring(0, N.length - 1), N += "]}", console.log(a), console.log(u); var O = z + N; console.log(O), O = JSON.parse(O), console.log(O); var j = d3.max(O.links, function (e) { return e.value }), E = d3.min(O.links, function (e) { return e.value }); console.log(j), console.log(E); var F = d3.max(O.nodes, function (e) { return e.score }), A = d3.min(O.nodes, function (e) { return e.score }), S = a - parseFloat(a.toString().substring(0, a.toString().length - 5)); const C = a - S; $("#slider-range-treshold").attr("min", C), $("#slider-range-treshold").attr("value", C), $("#slider-range-treshold").attr("max", u - (u - C) / parseFloat($("#text-box_genes-range").val())), $("#slider-range-treshold").attr("step", (u - C) / parseFloat($("#text-box_genes-range").val())), $("#threshold_network").val($("#slider-range-treshold").val()); let I = {}; function J(e, t) { return I[e.index + "," + t.index] || I[t.index + "," + e.index] || e.index == t.index } O.links.forEach(function (e) { I[e.source + "," + e.target] = !0 }); let D = null; var P = d3.layout.force().charge(-300).linkDistance(function (e) { return D = j != E ? 100 * (1 - ((e.value - E) / (j - E) + .1)) : 60 }).size([w, h]); P.nodes(O.nodes).links(O.links).start(); var q = g.selectAll(".link").data(O.links).enter().append("line").attr("class", "link").style("stroke-width", function (e) { return ((e.value - E) / (j - E) + .2) / 2 }).style("stroke", c), B = v.selectAll(".node").data(O.nodes).enter().append("g").attr("class", "node").attr("id", function (e) { return e.id_node }).style("visibility", "visible").call(P.drag), G = "fill", H = "stroke"; var K = B.append("path").attr("d", d3.svg.symbol().size(function (e) { return 20 * ((e.score - A) / (F - A) + 1) }).type(function (e) { return e.type })).style(G, function (e) { return isNumber(e.score) && e.score >= 0 ? e.module : "#ccc" }).style("stroke-width", 1).style(H, "white"), L = v.selectAll(".text").data(O.nodes).enter().append("text").attr("dy", ".35em").attr("id", function (e) { return "text_" + e.id_node }).style("font-size", "10px").style("text-shadow", "-1.5px 0 white, 0 1.5px white, 1.5px 0 white, 0 -1.5px white"); function M() { r = null, null === n && (svg.style("cursor", "move"), "white" != l && (K.style(H, "white"), L.style("font-weight", "normal"), q.style("stroke", function (e) { return isNumber(e.score) && e.score >= 0 ? s(e.score) : c }))) } function Q(e) { svg.style("cursor", "pointer"), null !== n && (e = n), r = e, "white" != l && (K.style(H, function (t) { return J(e, t) ? l : "white" }), L.style("font-weight", function (t) { return J(e, t) ? "bold" : "normal" }), q.style("stroke", function (t) { return t.source.index == e.index || t.target.index == e.index ? l : isNumber(t.score) && t.score >= 0 ? s(t.score) : c })) } L.attr("dx", function (e) { return i(e.size) || 8 }).text(function (e) { return "?" + e.id }), B.on("mouseover", function (e) { Q(e) }).on("mousedown", function (e) { d3.event.stopPropagation(), n = e, function (e) { o < 1 && (K.style("opacity", function (t) { return J(e, t) ? 1 : o }), L.style("opacity", function (t) { return J(e, t) ? 1 : o }), q.style("opacity", function (t) { return t.source.index == e.index || t.target.index == e.index ? 1 : o })) }(e), null === r && Q(e) }).on("mouseout", function (e) { M() }), d3.select(window).on("mouseup", function () { null !== n && (n = null, o < 1 && (K.style("opacity", 1), L.style("opacity", 1), q.style("opacity", 1))), null === r && M() }); var R = !1; let T = 0, U = !1; var V, W; $("#hide_nodes").click(function () { if (R = !R) { T = 0; for (let e = 0; e <= Object.keys(O.nodes).length; e++)U = !0, O.links.forEach(function (e) { e.source.index != T && e.target.index != T || (U = !1) }), U && (d3.select("#node_" + T).style("visibility", "hidden"), d3.select("#text_node_" + T).style("visibility", "hidden")), T++ } else for (var e = 0; e <= Object.keys(O.nodes).length; e++)d3.select("#node_" + e).style("visibility", "visible"), d3.select("#text_node_" + e).style("visibility", "visible") }), $("#slider-range-treshold").on("change", function () { let e = !1, n = '"links" : [', r = !1; for (let s = 0; s < x; s++) { e = !1; for (let l = 0; l < x + 3; l++)e && t.results[s][l] > $("#threshold_network").val() && (n += '{"source":' + s + ',"target":' + (l - 3) + ',"value":' + t.results[s][l] + "},", r = !0), 1 == t.results[s][l] && (e = !0) } if (r && (n = n.substring(0, n.length - 1), O = z + (n += "]}"), O = JSON.parse(O), q = g.selectAll(".link").data(O.links, function (e) { return e.source + "-" + e.target }), I = {}, O.links.forEach(function (e) { I[e.source + "," + e.target] = !0 }), q.enter().append("line").attr("class", "link").style("stroke-width", function (e) { return ((e.value - E) / (j - E) + .2) / 2 }).style("stroke", c), q.exit().remove(), P.on("tick", function () { B.attr("transform", function (e) { return "translate(" + e.x + "," + e.y + ")" }), L.attr("transform", function (e) { return "translate(" + e.x + "," + e.y + ")" }), q.attr("x1", function (e) { return e.source.x }).attr("y1", function (e) { return e.source.y }).attr("x2", function (e) { return e.target.x }).attr("y2", function (e) { return e.target.y }), B.attr("cx", function (e) { return e.x }).attr("cy", function (e) { return e.y }) }), P.links(O.links).start()), R) { T = 0; for (let e = 0; e <= Object.keys(O.nodes).length; e++)U = !0, O.links.forEach(function (e) { e.source.index != T && e.target.index != T || (U = !1) }), U ? (d3.select("#node_" + T).style("visibility", "hidden"), d3.select("#text_node_" + T).style("visibility", "hidden")) : (d3.select("#node_" + e).style("visibility", "visible"), d3.select("#text_node_" + e).style("visibility", "visible")), T++ } }), V = w, W = h, svg.attr("width", V).attr("height", W), P.size([P.size()[0] / d.scale(), P.size()[1] / d.scale()]).resume(), P.on("tick", function () { B.attr("transform", function (e) { return "translate(" + e.x + "," + e.y + ")" }), L.attr("transform", function (e) { return "translate(" + e.x + "," + e.y + ")" }), q.attr("x1", function (e) { return e.source.x }).attr("y1", function (e) { return e.source.y }).attr("x2", function (e) { return e.target.x }).attr("y2", function (e) { return e.target.y }), B.attr("cx", function (e) { return e.x }).attr("cy", function (e) { return e.y }) }), svg.call(d) } function isNumber(e) { return !isNaN(parseFloat(e)) && isFinite(e) }