let APIPlot = function () { }; APIPlot.prototype.svg, APIPlot.prototype.highlight_color = $("#module_dropdown").find(":selected").val(), APIPlot.prototype.default_node_color = "#ccc", APIPlot.prototype.default_link_color = "#7C7C7C", APIPlot.prototype.linkedByIndex = {}, APIPlot.prototype.highlight_trans = .3, APIPlot.prototype.number_of_genes = 0, APIPlot.prototype.number_of_NAN = 1, APIPlot.prototype.nodes = '{"nodes" : [', APIPlot.prototype.data_network_raw = "", APIPlot.prototype.force = d3.layout.force(), APIPlot.prototype.netPlot = function (t) { APIPlot.prototype.data_network_raw = t, $("body").addClass("loading"); var e = null, o = !1, r = 0, n = !1, l = 1, i = $("#network_plot").innerWidth(), s = $("#network_plot").innerHeight(), p = d3.scale.linear().domain([0, .5, 1]), a = d3.scale.pow().exponent(1).domain([1, 100]).range([8, 24]); APIPlot.prototype.svg = d3.select("#network_plot").append("svg"); var c = APIPlot.prototype.svg.append("g"), u = c.append("g"), P = c.append("g"), d = APIPlot.prototype.buildJSONtoPlot(APIPlot.prototype.data_network_raw); SVGData = JSON.parse(d), d = JSON.parse(d), console.log(d); var y = d3.max(d.links, function (t) { return t.value }), f = d3.min(d.links, function (t) { return t.value }), g = d3.max(d.nodes, function (t) { return t.score }), h = d3.min(d.nodes, function (t) { return t.score }); linkedByIndex = {}, d.links.forEach(function (t) { APIPlot.prototype.linkedByIndex[t.source + "," + t.target] = !0 }), APIPlot.prototype.force = APIPlot.prototype.force.charge(-250).linkDistance(function (t) { return y != f ? 100 * (1 - ((t.value - f) / (y - f) + .1)) : 60 }).size([$("#network_plot").innerWidth(), $("#network_plot").innerHeight()]).nodes(d.nodes).links(d.links).start(); var _ = u.selectAll(".link").data(d.links).enter().append("line").attr("class", "link").style("stroke-width", function (t) { return ((t.value - f) / (y - f) + .2) / 2 }).style("opacity", function (t) { return APIPlot.prototype.highlight_trans }).style("stroke", APIPlot.prototype.default_link_color), I = P.selectAll(".node").data(d.nodes).enter().append("g").attr("class", "node").attr("id", function (t) { return t.id_node }).style("visibility", "visible").call(APIPlot.prototype.force.drag), A = I.append("path").attr("d", d3.svg.symbol().size(function (t) { return ((t.score - h) / g + 1) * t.importance }).type(function (t) { return t.type })).style("fill", function (t) { return APIPlot.prototype.isNumber(t.score) && t.score >= 0 ? t.score : APIPlot.prototype.default_node_color }).style("stroke-width", 1).style("stroke", "white"), x = P.selectAll(".text").data(d.nodes).enter().append("text").attr("dy", ".35em").attr("id", function (t) { return "text_" + t.id_node }).style("font-size", "6px").style("text-shadow", "-1.5px 0 white, 0 1.5px white, 1.5px 0 white, 0 -1.5px white"); x.attr("dx", function (t) { return a(t.size) || 6 }).text(function (t) { return " " + t.id }), I.on("mouseover", function (t) { APIPlot.prototype.setHighlight(t, p, e, A, "stroke", x, _) }).on("mousedown", function (t) { d3.event.stopPropagation(), e = t, APIPlot.prototype.setFocus(t, A, x, _), APIPlot.prototype.setHighlight(t, p, e, A, "stroke", x, _) }).on("mouseout", function (t) { APIPlot.prototype.exitHighlight(p, e, A, "stroke", x, _) }), d3.select(window).on("mouseup", function () { null !== e && (e = null, APIPlot.prototype.highlight_trans < 1 && (A.style("opacity", 1), x.style("opacity", 1), _.style("opacity", 1))), APIPlot.prototype.exitHighlight(p, e, A, "stroke", x, _) }); var k = f - parseFloat(f.toString().substring(0, f.toString().length - 5)), v = y - parseFloat(y.toString().substring(0, y.toString().length - 5)); $("#slider-range-treshold").attr("min", f - k), $("#slider-range-treshold").val(f - k), $("#slider-range-treshold").attr("max", y - v), $("#slider-range-treshold").attr("step", parseFloat((y - v - (f - k)) / 10)), $("#threshold_network").val($("#slider-range-treshold").val()), $("#hide_nodes").click(function () { if (o = !o) { r = 0; for (let t = 0; t <= Object.keys(d.nodes).length; t++)n = !0, d.links.forEach(function (t) { t.source.index != r && t.target.index != r || (n = !1) }), n && (d3.select("#node_" + r).style("visibility", "hidden"), d3.select("#text_node_" + r).style("visibility", "hidden")), r++ } else for (var t = 0; t <= Object.keys(d.nodes).length; t++)d3.select("#node_" + t).style("visibility", "visible"), d3.select("#text_node_" + t).style("visibility", "visible") }), $("#slider-range-treshold").on("change", function (t) { let e = !1, l = '"links" : [', i = !1; for (let t = 0; t < APIPlot.prototype.number_of_genes; t++) { e = !1; for (let o = 0; o < APIPlot.prototype.number_of_genes + APIPlot.prototype.number_of_NAN; o++)e && APIPlot.prototype.data_network_raw[t][o] > $("#threshold_network").val() && (l += '{"source":' + t + ',"target":' + (o - APIPlot.prototype.number_of_NAN) + ',"value":' + APIPlot.prototype.data_network_raw[t][o] + "},", i = !0), 1 == APIPlot.prototype.data_network_raw[t][o] && (e = !0) } if (i && (l = l.substring(0, l.length - 1), l += "]}", data_network_onchange = APIPlot.prototype.nodes + l, d = JSON.parse(data_network_onchange), _ = u.selectAll(".link").data(d.links, function (t) { return t.source + "-" + t.target }), APIPlot.prototype.linkedByIndex = {}, d.links.forEach(function (t) { APIPlot.prototype.linkedByIndex[t.source + "," + t.target] = !0 }), _.enter().append("line").attr("class", "link").style("stroke-width", function (t) { return ((t.value - f) / (y - f) + .2) / 2 }).style("opacity", function (t) { return APIPlot.prototype.highlight_trans }).style("stroke", APIPlot.prototype.default_link_color), _.exit().remove(), APIPlot.prototype.force.on("tick", function () { I.attr("transform", function (t) { return "translate(" + t.x + "," + t.y + ")" }), x.attr("transform", function (t) { return "translate(" + t.x + "," + t.y + ")" }), _.attr("x1", function (t) { return t.source.x }).attr("y1", function (t) { return t.source.y }).attr("x2", function (t) { return t.target.x }).attr("y2", function (t) { return t.target.y }), I.attr("cx", function (t) { return t.x }).attr("cy", function (t) { return t.y }) }), APIPlot.prototype.force.links(d.links).start()), o) { r = 0; for (let t = 0; t <= Object.keys(d.nodes).length; t++)n = !0, d.links.forEach(function (t) { t.source.index != r && t.target.index != r || (n = !1) }), n ? (d3.select("#node_" + r).style("visibility", "hidden"), d3.select("#text_node_" + r).style("visibility", "hidden")) : (d3.select("#node_" + t).style("visibility", "visible"), d3.select("#text_node_" + t).style("visibility", "visible")), r++ } t.preventDefault() }), APIPlot.prototype.force.on("tick", function () { I.attr("transform", function (t) { return "translate(" + t.x + "," + t.y + ")" }), x.attr("transform", function (t) { return "translate(" + t.x + "," + t.y + ")" }), _.attr("x1", function (t) { return t.source.x }).attr("y1", function (t) { return t.source.y }).attr("x2", function (t) { return t.target.x }).attr("y2", function (t) { return t.target.y }), I.attr("cx", function (t) { return t.x }).attr("cy", function (t) { return t.y }) }); var m = d3.behavior.zoom().scaleExtent([1, 6.5]).on("zoom", function () { l = 1, 1 * m.scale() > 4.5 && (l = 4.5 / m.scale()), A.style("stroke-width", l); var t = 6; 6 * m.scale() > 8 && (t = 8 / m.scale()), A.attr("d", d3.svg.symbol().size(function (t) { return ((t.score - h) / g + 1) * t.importance }).type(function (t) { return t.type })), x.attr("dx", function (e) { return a(e.size) * t / 6 || t }); var e = 6; 6 * m.scale() > 18 && (e = 18 / m.scale()), x.style("font-size", e + "px"), c.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")") }); APIPlot.prototype.svg.style("cursor", "move").attr("width", i).attr("height", s).call(m), APIPlot.prototype.force.size([APIPlot.prototype.force.size()[0] / m.scale(), APIPlot.prototype.force.size()[1] / m.scale()]).resume(), $("#send_button").prop("disabled", !1) }, APIPlot.prototype.isNumber = function (t) { return !isNaN(parseFloat(t)) && isFinite(t) }, APIPlot.prototype.removeNumber = function (t) { return /\d/.test(t) && (t = t.replace(/\d+/g, "")), t }, APIPlot.prototype.isConnected = function (t, e) { return APIPlot.prototype.linkedByIndex[t.index + "," + e.index] || APIPlot.prototype.linkedByIndex[e.index + "," + t.index] || t.index == e.index }, APIPlot.prototype.setHighlight = function (t, e, o, r, n, l, i) { APIPlot.prototype.svg.style("cursor", "pointer"), null !== o && (t = o), highlight_node = t, APIPlot.prototype.highlight_color = APIPlot.prototype.removeNumber($("#module_dropdown").find(":selected").val()), "white" != APIPlot.prototype.highlight_color && (r.style(n, function (e) { return APIPlot.prototype.isConnected(t, e) ? APIPlot.prototype.highlight_color : "white" }), l.style("font-weight", function (e) { return APIPlot.prototype.isConnected(t, e) ? "bold" : "normal" }), i.style("stroke", function (o) { return o.source.index == t.index || o.target.index == t.index ? APIPlot.prototype.highlight_color : APIPlot.prototype.isNumber(o.score) && o.score >= 0 ? e(o.score) : APIPlot.prototype.default_link_color }).style("opacity", function (e) { return e.source.index == t.index || e.target.index == t.index ? 1 : APIPlot.prototype.highlight_trans })) }, APIPlot.prototype.exitHighlight = function (t, e, o, r, n, l) { highlight_node = null, null === e && (APIPlot.prototype.svg.style("cursor", "move"), "white" != APIPlot.prototype.highlight_color && (o.style(r, "white"), n.style("font-weight", "normal"), l.style("stroke", function (e) { return APIPlot.prototype.isNumber(e.score) && e.score >= 0 ? t(e.score) : APIPlot.prototype.default_link_color }), l.style("opacity", function (t) { return APIPlot.prototype.highlight_trans }))) }, APIPlot.prototype.setFocus = function (t, e, o, r) { APIPlot.prototype.highlight_trans < 1 && (e.style("opacity", function (e) { return APIPlot.prototype.isConnected(t, e) ? 1 : APIPlot.prototype.highlight_trans }), o.style("opacity", function (e) { return APIPlot.prototype.isConnected(t, e) ? 1 : APIPlot.prototype.highlight_trans }), r.style("opacity", function (e) { return e.source.index == t.index || e.target.index == t.index ? 1 : APIPlot.prototype.highlight_trans })) }, APIPlot.prototype.buildJSONtoPlot = function (t) { APIPlot.prototype.number_of_genes = parseInt($("#text-box_genes-range").val()), parseInt($("#genes-range").val()) <= t.length ? APIPlot.prototype.number_of_genes = parseInt($("#genes-range").val()) : APIPlot.prototype.number_of_genes = t.length; for (var e = [], o = [], r = [], n = 0, l = 0; l < APIPlot.prototype.number_of_genes; l++) { for (var i = 1; i <= APIPlot.prototype.number_of_genes; i++)"1" != t[l][i] && (n += parseFloat(t[l][i]), r.push(parseFloat(t[l][i]))); e.push(n), o.push(Math.max(...r)), n = 0, r = [] } var s, p = o.slice().sort(function (t, e) { return e - t }), a = o.slice().map(function (t) { return p.indexOf(t) + 1 }); APIPlot.prototype.nodes = '{"nodes" : ['; for (l = 0; l < APIPlot.prototype.number_of_genes; l++)APIPlot.prototype.nodes += '{"id" : "' + t[l][0] + '", "id_node" : "node_' + l + '", "score" : ' + e[l] + ', "importance" : ' + (APIPlot.prototype.number_of_genes + 5 - a[l]), l == APIPlot.prototype.number_of_genes - 1 ? APIPlot.prototype.nodes += "}]," : APIPlot.prototype.nodes += "},"; var c = '"links" : ['; for (l = 0; l < APIPlot.prototype.number_of_genes; l++) { s = !1; for (i = 0; i < APIPlot.prototype.number_of_genes + APIPlot.prototype.number_of_NAN; i++)s && (c += '{"source":' + l + ',"target":' + (i - APIPlot.prototype.number_of_NAN) + ',"value":' + t[l][i] + "},"), 1 == t[l][i] && (s = !0) } return c = c.substring(0, c.length - 1), c += "]}", APIPlot.prototype.nodes + c };