let API = function () { this.SVGData = "" }; API.prototype.menuInit = function (e) { if (1 == e) $("#menu").show(), $("#empty-initial-results").css("visibility", "visible"), $("#send_button").prop("disabled", !0), $("#category_dropdown").empty(), API.prototype.getNetworkCategories(), $("#network_dropdown").prop("disabled", !0).selectpicker("refresh"), $("#module_selection").prop("disabled", !0).selectpicker("refresh"), $("#goFromTissue_div").hide(), $("#cellType_div").hide(), $("#error").hide(); else if (11 == e) { $("body").addClass("loading"); const t = $("#Category").val(), o = $("#Network").val(), r = $("#ModuleColor").val(); API.prototype.getNetworkCategories(t), API.prototype.getAvailableNetworks(t, o), $("#module_selection").selectpicker("val", ["1", "2"]).selectpicker("refresh"), API.prototype.sendButtonFunction(e, r), $("div.navbar-collapse").children("ul").remove(), $("#menu").show(), $("#menu_data").hide(), $("#footer").hide(), $("#menu_gene_list").removeClass("hidden"), $("#get_gene_list").click(function () { API.prototype.getMM(o, t, r) }) } else 2 == e || 3 == e ? API.prototype.getTreeMenuData() : 4 == e && ($("#category_dropdown").empty(), API.prototype.getNetworkCategories(), $("#network_dropdown").prop("disabled", !0).selectpicker("refresh"), $("#module_dropdown").prop("disabled", !0), $("#genes-range").prop("disabled", !0), $("#text-box_genes-range").prop("disabled", !0), $("#slider-range-treshold").prop("disabled", !0), $("#threshold_network").prop("disabled", !0), $("#send_button").prop("disabled", !0), $("#save_plot").prop("disabled", !0), $("#save_data").prop("disabled", !0)); $("#category_dropdown").on("change", function () { $("#network_dropdown").children().remove(), API.prototype.getAvailableNetworks(this.value), $("#network_dropdown").prop("disabled", !1).selectpicker("refresh"), $("#send_button").prop("disabled", !0), 1 == e ? $("#module_selection").selectpicker("deselectAll").prop("disabled", !0).selectpicker("refresh") : 2 == e ? ($("#genes").val(""), $("#genes").prop("disabled", !0)) : 4 == e && ($("#module_dropdown").children().remove(), $("#module_dropdown").prop("disabled", !0).selectpicker("refresh")) }), $("#network_dropdown").on("change", function () { 1 == e ? $("#module_selection").prop("disabled", !1).selectpicker("refresh") : 2 == e ? ($("#genes").val(""), $("#genes").prop("disabled", !1)) : 4 == e && ($("#send_button").prop("disabled", !0), $("#module_dropdown").children().remove(), API.prototype.getAvailableModules($("#category_dropdown").val(), this.value), $("#module_dropdown").prop("disabled", !1)) }), $("#module_dropdown").on("change", function () { 4 == e && ($("#genes-range").prop("disabled", !1), $("#text-box_genes-range").prop("disabled", !1), $("#send_button").prop("disabled", !1)) }), $("#module_selection").on("change", function () { $("#send_button").prop("disabled", !1) }), $("#send_button").on("click", function () { API.prototype.sendButtonFunction(e) }), $("#save_plot").on("click", function () { API.prototype.downloadSVGPlot() }), $("#save_data").on("click", function () { API.prototype.downloadSVGData() }), $("#goFromTissue_table").on("click", "td.details-control", function () { const e = $(this).closest("tr"), t = $("#goFromTissue_table").DataTable().row(e); t.child.isShown() ? (t.child.hide(), e.removeClass("shown")) : API.prototype.hideRowsGOFromTissue(t.data(), e, t) }), $("#globalReportOnGenes_table, #globalSummariseReportOnGenes_table, #reportOnGenes_table, #summariseClustering_table").on("click", "td.details-control", function () { const e = $(this).closest("tr"), t = $(this).closest("table")[0].id, o = $("#" + t).DataTable().row(e); o.child.isShown() ? (o.child.hide(), e.removeClass("shown")) : API.prototype.hideRowsReportOnGenes(o.data(), e, o, t) }) }, API.prototype.getNetworkCategories = function (e) { if (void 0 === e && (e = null), null != e) { const t = '<option value="' + e + '" selected>' + e + "</option>"; $("#category_dropdown").append(t).selectpicker("refresh") } else $.ajax({ url: "/" + environment + "/API/GetNetworkCategories", type: "GET", success: function (e) { if (e.indexOf("Problems") >= 0) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>" + e + "</p>"), $("#goFromTissue_divError").show(); else if ("{}" == e) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>No data has been received!</p>"), $("#goFromTissue_divError").show(); else { $("#goFromTissue_divError").hide(), console.log(e), e = JSON.parse(e).sort(); for (let t = 0; t < e.length; t++) { const o = '<option value="' + e[t] + '">' + e[t] + "</option>"; $("#category_dropdown").append(o).selectpicker("refresh") } startIntro() } }, error: function (e) { console.log(e) } }) }, API.prototype.getAvailableNetworks = function (e, t) { if (void 0 === t && (t = null), null != t) { const e = '<option value="' + t + '" selected>' + t + "</option>"; $("#network_dropdown").append(e).selectpicker("refresh") } else $.ajax({ url: "/" + environment + "/API/GetAvailableNetworks?Category=" + e, type: "GET", success: function (e) { if (e.indexOf("Problems") >= 0) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>" + e + "</p>"), $("#goFromTissue_divError").show(); else if ("{}" == e) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>No data has been received!</p>"), $("#goFromTissue_divError").show(); else { $("#goFromTissue_divError").hide(), console.log(e), e = JSON.parse(e).sort(); for (let t = 0; t < e.length; t++) { const o = '<option value="' + e[t] + '">' + e[t] + "</option>"; $("#network_dropdown").append(o).selectpicker("refresh") } } }, error: function (e) { console.log(e) } }) }, API.prototype.getAvailableModules = function (e, t) { void 0 === e || void 0 === t ? alert("Please, select a category and network values.") : $.ajax({ url: "/" + environment + "/API/GetAvailableModules?Category=" + e + "&Network=" + t, type: "GET", success: function (e) { if (e.indexOf("Problems") >= 0) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>" + e + "</p>"), $("#goFromTissue_divError").show(); else if ("{}" == e) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>No data has been received!</p>"), $("#goFromTissue_divError").show(); else { $("#goFromTissue_divError").hide(), console.log(e), e = JSON.parse(e).sort(); for (let t = 0; t < e.length; t++) { const o = '<option value="' + e[t] + '">' + e[t] + "</option>"; $("#module_dropdown").append(o).selectpicker("refresh") } } }, error: function (e) { console.log(e) } }) }, API.prototype.getTreeMenuData = function () { $.ajax({ url: "/" + environment + "/API/GetTreeMenuData", type: "GET", success: function (e) { console.log(e), e.indexOf("Problems") >= 0 ? ($("#error").children("p").remove(), $("#error").append("<p>" + e + "</p>"), $("#empty-initial-results").hide(), $("#error").show()) : (simTree({ el: "#tree", data: JSON.parse(e), check: !0, linkParent: !0, expand: "expand", onClick: function (e) { e.length > 0 && $("#genes").prop("disabled", !1) } }), $("ul.show").removeClass("show"), $("li[data-id = '100']").closest("ul").first().addClass("show"), $("li[data-id = '1']").closest("ul").addClass("show"), $("ul.sim-tree").find("i.sim-tree-checkbox").first().addClass("sim-tree-semi"), $("li[data-id = '1']").find("i.sim-tree-checkbox").first().addClass("sim-tree-semi"), $("li[data-id = '100']").find("i.sim-tree-checkbox").first().addClass("checked"), startIntro()) }, error: function (e) { console.log(e) } }) }, API.prototype.sendButtonFunction = function (e, t) { if (void 0 === t && (t = null), $("body").addClass("loading"), 1 == e || 11 == e) { $("#error").hide(); const e = $("#module_selection").val(); $("#goFromTissue_table tr").length > 1 && $.fn.DataTable.isDataTable("#goFromTissue_table") && (table = $("#goFromTissue_table").DataTable(), table.destroy(), $("#goFromTissue_table").remove("tbody"), $("#goFromTissue_div").hide()), $("#cellType_table tr").length > 1 && ($("#cellType_table").DataTable().destroy(), $("#cellType_table").children().remove(), $("#cellType_div").hide()), 1 == e.length ? "1" == e[0] ? (API.prototype.getGOFromTissue($("#category_dropdown").val(), $("#network_dropdown").val(), t), $("#cellType_div").hide(), $("#empty-initial-results").hide(), $('.nav-tabs a[href="#tab1"]').tab('show'), $('.nav-tabs a[href="#tab2"]').tab().hide()) : (API.prototype.getCellTypeFromTissue($("#category_dropdown").val(), $("#network_dropdown").val(), t), $("#goFromTissue_div").hide(), $("#empty-initial-results").hide(), $('.nav-tabs a[href="#tab2"]').tab('show'), $('.nav-tabs a[href="#tab1"]').tab().hide()) : 2 == e.length && (API.prototype.getGOFromTissue($("#category_dropdown").val(), $("#network_dropdown").val(), t), API.prototype.getCellTypeFromTissue($("#category_dropdown").val(), $("#network_dropdown").val(), t), $("#empty-initial-results").hide(), $('.nav-tabs a[href="#tab1"]').tab().show(), $('.nav-tabs a[href="#tab2"]').tab().show()) } else if (2 == e || 3 == e) if ("" == $("#genes").val()) alert("Please, enter your gene set."), $("body").removeClass("loading"); else if (0 == $("i.checked").length) alert("Please, select your preferred network."), $("body").removeClass("loading"); else if ($("genes").focus(), 2 == e ? ($("#reportOnGenes_div").hide(), $("#summariseClustering_div").hide(), $("#reportOnGenes_table tr").length > 1 && $("#reportOnGenes_table").DataTable().destroy(), $("#summariseClustering_table tr").length > 1 && $("#summariseClustering_table").DataTable().destroy()) : 3 == e && ($("#globalReportOnGenes_div").hide(), $("#globalSummariseReportOnGenes_div").hide(), $("#globalReportOnGenes_table tr").length > 1 && $("#globalReportOnGenes_table").DataTable().destroy(), $("#globalSummariseReportOnGenes_table tr").length > 1 && $("#globalSummariseReportOnGenes_table").DataTable().destroy()), $("#genes").val().indexOf('"') > -1) alert("Please, introduce your non-quoted genes using one of the following formats:\nComma-separated: GENE1,GENE2\nSpace-separated: GENE1 GENE2\nComma and space sparated: GENE1, GENE2"), $("#genes").val(""), $("body").removeClass("loading"); else if ($("#genes").val().indexOf("  ") > -1) alert("Please, introduce your non-quoted genes using one of the following formats:\nComma-separated: GENE1,GENE2\nSpace-separated: GENE1 GENE2\nComma and space sparated: GENE1, GENE2"), $("#genes").val(""), $("body").removeClass("loading"); else if ($("#genes").val().indexOf("{") > -1 || $("#genes").val().indexOf("}") > -1) alert("Please, introduce your non-quoted genes using one of the following formats:\nComma-separated: GENE1,GENE2\nSpace-separated: GENE1 GENE2\nComma and space sparated: GENE1, GENE2"), $("#genes").val(""), $("body").removeClass("loading"); else if ($("#genes").val().indexOf("[") > -1 || $("#genes").val().indexOf("]") > -1) alert("Please, introduce your non-quoted genes using one of the following formats:\nComma-separated: GENE1,GENE2\nSpace-separated: GENE1 GENE2\nComma and space sparated: GENE1, GENE2"), $("#genes").val(""), $("body").removeClass("loading"); else { let t = ""; const o = $("i.checked").closest("li [data-level*=2]"); for (let e = 0; e < o.length; e++) { const r = $(o[e]).children().eq(1).text(), a = $(o[e]).children("ul").find("i.checked").parent(); let n = null; a.each(function (e, t) { n = 0 == e ? t.innerText : n + "," + t.innerText }), t = t + r + "|" + n + "**" } if ($("#genes").val().indexOf("\n") > -1) { const o = $("#genes").val().replace(/\n/g, " "); 2 == e ? API.prototype.reportOnGenesMultipleTissue(t, o) : 3 == e && API.prototype.globalReportOnGenes(t, o) } else 2 == e ? API.prototype.reportOnGenesMultipleTissue(t, $("#genes").val()) : 3 == e && API.prototype.globalReportOnGenes(t, $("#genes").val()) } else 4 == e && ($("#send_button").prop("disabled", !0), $("#empty-initial-results").hide(), API.prototype.generateGraph(), $("#plot_area").show(), $("#save_plot").prop("disabled", !1), $("#save_data").prop("disabled", !1)) }, API.prototype.getGOFromTissue = function (e, t, o) { void 0 === o && (o = null), $.ajax({ url: "/" + environment + "/API/GetGOFromTissue?Category=" + e + "&Network=" + t, type: "GET", success: function (e) { if (e.indexOf("Problems") >= 0) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>" + e + "</p>"), $("#goFromTissue_divError").show(); else if ("{}" == e) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>No data has been received!</p>"), $("#goFromTissue_divError").show(); else { console.log(e), e = JSON.parse(e); for (let t = 0; t < e.length; t++)0 === e[t].p_value && (e.splice(t, 1), t--); $("#goFromTissue_table").DataTable({ data: e, deferRender: !0, columns: [{ className: "details-control", orderable: !1, data: null, defaultContent: "" }, { data: "query_number", title: "Module", render: function (e, t, o, r) { return "display" === t && "" === $("#ModuleColor").val() && (e = "<a href=\"javascript:API.prototype.searchByModuleColor('" + e + "','" + $("#category_dropdown").val() + "','" + $("#network_dropdown").val() + '\');" title="Find out more ...">' + e + "</a>"), e } }, { data: "p_value", title: "p-value" }, { data: "query_size", title: "Module Size" }, { data: "term_id", title: "Ontology Term ID", visible: !1, searchable: !0 }, { data: "domain", title: "Ontology" }, { data: "term_name", title: "Ontology Term" }, { data: "intersection", visible: !1, searchable: !0 }], order: [[2, "asc"]], dom: "Bfrtip", buttons: ["copy", "print", { extend: "excel", title: "CoExp_" + $("#category_dropdown").val() + "_" + $("#network_dropdown").val() + "_GO-Report" }] }), null != o && $("#goFromTissue_table").DataTable().columns(1).search("^" + o + "$", !0, !1).draw(), $("#goFromTissue_divError").hide(), $("#goFromTissue_div").show() } $("#goFromTissue_div_spinner").hide(), $("#empty-initial-results").hide(), $("#tabs").show(), $("body").removeClass("loading") }, error: function (e) { console.log(e), $("#goFromTissue_div_spinner").hide() } }) }, API.prototype.getCellTypeFromTissue = function (e, t, o) { void 0 === o && (o = null), $.ajax({ url: "/" + environment + "/API/GetCellTypeFromTissue?Category=" + e + "&Network=" + t, type: "GET", success: function (e) { if (e.indexOf("Problems") >= 0) $("#cellType_divError").children("p").remove(), $("#cellType_divError").append("<p>" + e + "</p>"), $("#cellType_divError").show(); else if ("{}" == e) $("#cellType_divError").children("p").remove(), $("#cellType_divError").append("<p>No data has been received!</p>"), $("#cellType_divError").show(); else { console.log(e); let t = [], r = null; data = JSON.parse(e); for (let e = 0; e < data.length; e++)r = Object.keys(data[e]).sort(), data[e] = JSON.parse(JSON.stringify(data[e], r)); columnNames = Object.keys(data[0]); for (let e in columnNames) if (null != o) if (0 == e || columnNames[e] == o) t.push({ data: columnNames[e], title: columnNames[e] }); else for (let t = 0; t < data.length; t++)delete data[t][columnNames[e]]; else t.push({ data: columnNames[e], title: columnNames[e] }); if (null == o) { let e = !1; for (let o = 1; o < t.length; o++) { for (let r = 0; r < data.length; r++)if (1 !== data[r][t[o]]) { e = !0; break } if (!e) for (let e = 0; e < data.length; e++)delete data[e][t[o]]; e = !1 } hasPvalue = !1; for (let e = 0; e < data.length; e++) { for (let o = 1; o < t.length; o++)if (1 !== data[e][Object.keys(data[e])[o]] && 0 !== data[e][Object.keys(data[e])[o]]) { hasPvalue = !0; break } hasPvalue || (data.splice(e, 1), e--), hasPvalue = !1 } } else for (let e = 0; e < data.length; e++)for (let o = 1; o < t.length; o++)1 !== data[e][Object.keys(data[e])[o]] && 0 !== data[e][Object.keys(data[e])[o]] || (data.splice(e, 1), e--); null == data[0] ? ($("#cellType_table").hide(), $("#cellType_div").append("<p>The module '" + o + "' does not have any significant p-values over any cell type.</p>")) : ($("#cellType_table").DataTable({ colReorder: !0, deferRender: !0, data: data, columns: t, dom: "Bfrtip", autoWidth: !1, columnDefs: [{ targets: 1, className: "noVis" }], buttons: ["copy", "print", { extend: "excel", title: "CoExp_" + $("#category_dropdown").val() + "_" + $("#network_dropdown").val() + "_CellTypeReport" }], drawCallback: function () { $("#cellType_table").find("td:not(:first-child):contains(.)").css("backgroundColor", "yellow") }, scrollX: !0, paging: !0, scrollCollapse: !0 }).on("search.dt", function () { $("#cellType_table").DataTable().columns({ filter: "applied" }).every(function () { 1 != this.data().unique().length || "1" != this.data().unique()[0] && "0" != this.data().unique()[0] ? this.visible(!0) : this.visible(!1) }) }), $("#cellType_table").DataTable().draw()), $("#cellType_div").show(), $("#cellType_divError").hide() } $("#empty-initial-results").hide(), $("#tabs").show(), 1 == $("#module_selection").val().length && $("body").removeClass("loading") }, error: function (e) { console.log(e) } }) }, API.prototype.reportOnGenesMultipleTissue = function (e, t) { try { $.ajax({ url: "/" + environment + "/API/PostReportOnGenesMultipleTissue", data: JSON.stringify({ MultipleSelectionData: e, Genes: t }), method: "POST", dataType: "json", contentType: "application/json", success: function (e) { if (e.indexOf("Problems") >= 0) $("#error").children("p").remove(), $("#error").append("<p>" + e + "</p>"), $("#error").show(), $("#empty-initial-results").hide(); else { console.log(e); const t = _.groupBy(JSON.parse(e), function (e) { return e.network + "_" + e.module }), o = _.map(t, function (e) { return { network: e[0].network, category: e[0].category, module: e[0].module, gene: _.pluck(e, "gene"), fisher: e[0].fisher, size: e[0].size, go_report: e[0].go_report, cell_type_pred: e[0].cell_type_pred } }); $("#summariseClustering_table").DataTable({ data: o, deferRender: !0, columns: [{ className: "details-control", orderable: !1, data: null, defaultContent: "" }, { data: "network" }, { data: "category" }, { data: "module", render: function (e, t, o, r) { return "display" === t && (e = "<a href=\"javascript:API.prototype.searchByModuleColor('" + e + "','" + o.category + "','" + o.network + '\');" title="Find out more ...">' + e + "</a>"), e } }, { data: "gene", title: "overlap", render: function (e, t, o, r) { return e.length } }, { data: "gene", visible: !1, searchable: !0 }, { data: "fisher" }, { data: "size" }, { data: "go_report", visible: !1, searchable: !0 }, { data: "cell_type_pred", visible: !1, searchable: !0 }], order: [[5, "asc"]], dom: "Bfrtip", buttons: ["copy", "excel", "print", { text: "EXPAND RESULTS", action: function (e, t, o, r) { $("#summariseClustering_div").hide(), $("#reportOnGenes_div").show(), $("#empty-initial-results").hide() } }] }), $("#reportOnGenes_table").DataTable({ data: JSON.parse(e), deferRender: !0, columns: [{ className: "details-control", orderable: !1, data: null, defaultContent: "" }, { data: "gene" }, { data: "category" }, { data: "network" }, { data: "ensgene" }, { data: "fisher" }, { data: "module", render: function (e, t, o, r) { return "display" === t && (e = "<a href=\"javascript:API.prototype.searchByModuleColor('" + e + "','" + o.category + "','" + o.network + '\');" title="Find out more ...">' + e + "</a>"), e } }, { data: "mm" }, { data: "size" }, { data: "go_report", visible: !1, searchable: !0 }, { data: "cell_type_pred", visible: !1, searchable: !0 }], order: [[4, "asc"]], dom: "Bfrtip", buttons: ["copy", "excel", "print", { text: "SUMMARISE CLUSTERING", action: function (e, t, o, r) { $("#reportOnGenes_div").hide(), $("#empty-initial-results").hide(), $("#summariseClustering_div").show() } }] }), $("#reportOnGenes_div").show(), $("#empty-initial-results").hide(), $("#error").hide() } $("body").removeClass("loading") }, error: function (e) { console.log(e), $("body").removeClass("loading") } }) } catch (e) { $("body").removeClass("loading") } }, API.prototype.globalReportOnGenes = function (e, t) { try { $.ajax({ url: "/" + environment + "/API/PostGlobalReportOnGenes", data: JSON.stringify({ MultipleSelectionData: "{" + e + "}", Genes: t }), method: "POST", contentType: "application/json", success: function (e) { if (e.indexOf("Problems") >= 0) $("#error").empty(), $("#error").append("<h4>Sorry, none of the introduced genes have been found in any of the selected networks.</h4><p>Please, try again with another network selection.</p>"), $("#error").show(), $("body").removeClass("loading"), $("#empty-initial-results").hide(); else if (e.indexOf("Please") >= 0) alert(e), $("body").removeClass("loading"); else if (API.prototype.checkGenesFound(e), void 0 !== JSON.parse(e).message) { e = JSON.parse(e), 1 == confirm(e.message) ? API.prototype.globalReportOnGenes(e.multipleData, e.genes) : $("body").removeClass("loading") } else { console.log(e); const t = _.groupBy(JSON.parse(e), function (e) { return e.network + "_" + e.module }), o = _.map(t, function (e) { return { network: e[0].network, category: e[0].category, module: e[0].module, gene: _.pluck(e, "gene"), fisher: e[0].fisher, FDR: e[0].FDR, Bonferroni: e[0].Bonferroni, size: e[0].size, go_report: e[0].go_report, cell_type_pred: e[0].cell_type_pred } }); $("#globalSummariseReportOnGenes_table").DataTable({ data: o, deferRender: !0, columns: [{ className: "details-control", orderable: !1, data: null, defaultContent: "" }, { data: "network" }, { data: "category" }, { data: "module", render: function (e, t, o, r) { return "display" === t && (e = "<a href=\"javascript:API.prototype.searchByModuleColor('" + e + "','" + o.category + "','" + o.network + '\');" title="Find out more ...">' + e + "</a>"), e } }, { data: "gene", render: function (e, t, o, r) { return e.length } }, { data: "gene", visible: !1, searchable: !0 }, { data: "fisher" }, { data: "FDR" }, { data: "Bonferroni" }, { data: "size" }, { data: "go_report", visible: !1, searchable: !0 }, { data: "cell_type_pred", visible: !1, searchable: !0 }], order: [[5, "asc"]], dom: "Bfrtip", buttons: ["copy", "print", { extend: "excel", title: "CoExp_GeneSetAnnotation_Report" }, { text: "EXPAND RESULTS", action: function (e, t, o, r) { $("#globalSummariseReportOnGenes_div").hide(), $("#globalReportOnGenes_div").show(), $("#empty-initial-results").hide() } }] }), $("#globalReportOnGenes_table").DataTable({ data: JSON.parse(e), deferRender: !0, columns: [{ className: "details-control", orderable: !1, data: null, defaultContent: "" }, { data: "gene" }, { data: "category" }, { data: "network" }, { data: "ensgene" }, { data: "fisher" }, { data: "FDR" }, { data: "Bonferroni" }, { data: "module", render: function (e, t, o, r) { return "display" === t && (e = "<a href=\"javascript:API.prototype.searchByModuleColor('" + e + "','" + o.category + "','" + o.network + '\');" title="Find out more ...">' + e + "</a>"), e } }, { data: "mm" }, { data: "size" }, { data: "go_report", visible: !1, searchable: !0 }, { data: "cell_type_pred", visible: !1, searchable: !0 }], order: [[4, "asc"]], dom: "Bfrtip", buttons: ["copy", "print", { extend: "excel", title: "CoExp_GeneSetAnnotation_Report" }, { text: "SUMMARISE CLUSTERING", action: function (e, t, o, r) { $("#globalReportOnGenes_div").hide(), $("#globalSummariseReportOnGenes_div").show(), $("#empty-initial-results").hide() } }] }), $("body").removeClass("loading") } }, error: function (e) { console.log(e) } }) } catch (e) { $("body").removeClass("loading") } }, API.prototype.searchByModuleColor = function (e, t, o) { window.open(url = "/" + environment + "/Run/Catalogue?category=" + t + "&network=" + o + "&modulecolor=" + e, "", "toolbar= 0, scrollbars = 1, statusbar = 0,menubar=0,resizable=0,height=500,width=1200") }, API.prototype.hideRowsGOFromTissue = function (e, t, o) { const r = e.term_id.split(":"), a = r[1]; let n = "", l = "", s = ""; "GO" == r[0] ? (n = "/" + environment + "/API/GetInfoFromQuickGO", l = e.term_id) : "REAC" == r[0] ? (n = "/" + environment + "/API/GetInfoFromREACTOME", l = r[1]) : (n = "/" + environment + "/API/GetInfoFromKEGG", l = r[1]), e.intersection.indexOf(", ") >= 0 ? s = e.intersection.split(", ") : e.intersection.indexOf(" ") >= 0 && (s = e.intersection.split(" ")); let i = null; for (let e = 0; e < s.length; e++) { const t = "https://snca.atica.um.es/browser/app/vizER/?gene=" + s[e], o = "https://gtexportal.org/home/gene/" + s[e], r = "https://www.genecards.org/cgi-bin/carddisp.pl?gene=" + s[e]; let a = 'Check in splicing reads in <a href="' + t + '" target="_blank">vizER</a>.<br/>'; a = (a = a + 'Check expression in <a href="' + o + '" target="_blank">GTEx</a>.<br/>') + 'Check gene details in <a href="' + r + '" target="_blank">GeneCards</a>.', i = 0 == e ? "<a href='#' id='" + s[e] + "' data-html='true' data-trigger='click' data-placement='bottom' title='" + s[e] + "' data-content='" + a + "'>" + s[e] + "</a>" : i + ", <a href='#' id='" + s[e] + "' data-html='true' data-trigger='click' data-placement='bottom' title='" + s[e] + "' data-content='" + a + "'>" + s[e] + "</a>" } $.ajax({ url: n, type: "POST", data: { term: l }, success: function (n) { $("body").addClass("loading"), n = JSON.parse(n); let l = null; if ("GO" == r[0] && n.results.length > 0) { const t = "<b>Id: </b> " + (n = n.results[0]).id + "<br/><b>Name: </b> " + n.name + "<br/><b>Aspect: </b> " + n.aspect + "<br/><b>Definition: </b> " + n.definition.text + "<br/>"; l = "<a id='" + a + "' href='#' data-trigger='hover' data-html='true' data-placement='bottom' title='" + e.term_id + "' data-content='" + t + "'>" + e.term_id + "</a>" } else if ("REAC" == r[0] && null != n.dbId) { console.log(n); let t = ""; n.isInDisease ? t = "<br/><b>Disease: </b> (" + n.disease[0].displayName + ") " + n.disease[0].definition + "<br/>" : null != n.goBiologicalProcess && (t = "<br/><b>Biological Process: </b> " + n.goBiologicalProcess.definition + "<br/>"); const o = "<b>Id: </b> " + e.term_id + "<br/><b>Name: </b> " + n.displayName + "<br/><b>Species: </b> " + n.speciesName + t; l = "<a id='" + a + "' href='#' data-trigger='hover' data-html='true' data-placement='bottom' title='" + e.term_id + "' data-content='" + o + "'>" + e.term_id + "</a>" } else if ("KEGG" == r[0] && n.length > 0) { let t = ""; if ("" != (n = n[0]).description) t = "<b>Description: </b> " + n.description + "<br/>"; else if ("" != n.diseases) { t += "<b>Diseases: </b> "; for (let e in n.diseases) t = t + n.diseases[e] + "<br/>" } const o = "<b>Id: </b> " + n.entry_id + "<br/><b>Name: </b> " + n.name + "<br/>" + t; l = "<a id='" + a + "' href='#' data-trigger='hover' data-html='true' data-placement='bottom' title='" + e.term_id + "' data-content='" + o + "'>" + e.term_id + "</a>" } const s = '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;"><tr><td>TermID: </td><td>' + l + "</td></tr><tr><td>Genes: </td><td>" + i + "</td></tr></table>"; o.child(s).show(), t.addClass("shown"), $("[data-placement='bottom']").popover(), $("body").removeClass("loading") }, error: function () { return "No results found!" } }) }, API.prototype.hideRowsReportOnGenes = function (e, t, o, r) { let a = "", n = e.go_report; const l = e.go_report.match(/GO:[0-9]*/g); if (null != l) for (let e = 0; e < l.length; e++)n = n.replace(l[e], "<a id='" + l[e] + "' href='#' onmouseover='javascript:API.prototype.getCardData(\"" + l[e] + "\")' data-placement='bottom' data-trigger='hover' data-html='true' title='" + l[e] + "' data-content='<div class=\"loader\"></div>'>" + l[e] + "</a>"); else n = "no data"; if (r.toLowerCase().indexOf("summarise") >= 0) { let t = null; for (let o = 0; o < e.gene.length; o++) { const r = "https://snca.atica.um.es/browser/app/vizER/?gene=" + e.gene[o], a = "https://gtexportal.org/home/gene/" + e.gene[o], n = "https://www.genecards.org/cgi-bin/carddisp.pl?gene=" + e.gene[o]; let l = 'Check in splicing reads in <a href="' + r + '" target="_blank">vizER</a>.<br/>'; l = (l = l + 'Check expression in <a href="' + a + '" target="_blank">GTEx</a>.<br/>') + 'Check gene details in <a href="' + n + '" target="_blank">GeneCards</a>.', t = 0 == o ? "<a href='#' id='" + e.gene[o] + "' data-html='true' data-trigger='click' data-placement='bottom' title='" + e.gene[o] + "' data-content='" + l + "'>" + e.gene[o] + "</a>" : t + ", <a href='#' id='" + e.gene[o] + "' data-html='true' data-trigger='click' data-placement='bottom' title='" + e.gene[o] + "' data-content='" + l + "'>" + e.gene[o] + "</a>" } a = "<tr><td>Genes: </td><td>" + t + "</td></tr>" } n = "no data" != n ? "<tr><td>GO Report: </td><td>" + n + "</td></tr>" : "<tr><td>GO Report: </td><td> - </td></tr>", "void" != e.cell_type_pred ? cell_type_pred = "<tr><td>Cell Type: </td><td>" + e.cell_type_pred + "</td></tr>" : cell_type_pred = "<tr><td>Cell Type: </td><td> - </td></tr>"; const s = '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">' + a + n + cell_type_pred + "</table>"; $("body").removeClass("loading"), o.child(s).show(), t.addClass("shown"), $("[data-placement='bottom']").popover() }, API.prototype.getCardData = function (e) { let t = "/" + environment + "/API/GetInfoFromQuickGO"; $.ajax({ url: t, type: "POST", data: { term: e }, success: function (e) { if ((e = JSON.parse(e)).results.length > 0) { const o = "<b>Id: </b> " + (e = e.results[0]).id + "<br/><b>Name: </b> " + e.name + "<br/><b>Aspect: </b> " + e.aspect + "<br/><b>Definition</b><br/>" + e.definition.text + "<br/>", r = this.data.split("%3A")[1]; $("a[id*='" + r + "']").attr("data-content", o); var t = $("a[id*='" + r + "']").data("bs.popover"); t.setContent(), t.$tip.addClass(t.options.placement) } }, error: function () { return "No results found!" } }) }, API.prototype.generateGraph = function () { $("#network_plot").html(""); const e = $("#category_dropdown").find(":selected").val(), t = $("#network_dropdown").find(":selected").val(), o = $("#module_dropdown").find(":selected").val(), r = $("#text-box_genes-range").val(); try { $("body").addClass("loading"), $.ajax({ url: "/" + environment + "/API/PostGetModuleTOMGraph", data: JSON.stringify({ Category: e, Network: t, ModuleColor: o, TopGenes: r }), method: "POST", contentType: "application/json", success: function (e) { e.indexOf("Problems") >= 0 ? ($("#error").empty(), $("#error").append("<h4>Sorry, an error has ocurred when generating the plot.</h4>", e, "<p>Please, try again with another selection.</p>"), $("#error").show(), $("body").removeClass("loading"), $("#empty-initial-results").hide(), $("#send_button").prop("disabled", !1)) : (e = JSON.parse(e), console.log(e), APIPlot.prototype.netPlot(e), $("#slider-range-treshold").prop("disabled", !1), $("#hide_nodes").prop("disabled", !1), $("body").removeClass("loading")) }, error: function (e) { console.log(e), $("#send_button").prop("disabled", !1), $("body").removeClass("loading") } }) } catch (e) { $("body").removeClass("loading") } }, API.prototype.downloadSVGPlot = function () { $("body").addClass("loading"); const e = document.getElementsByTagName("svg")[0]; e.setAttribute("xlink", "http://www.w3.org/1999/xlink"); let t = (new XMLSerializer).serializeToString(e); t = (t = t.replace(/(\w+)?:?xlink=/g, "xmlns:xlink=")).replace(/NS\d+:href/g, "xlink:href"); const o = 3 * $("#network_plot").innerWidth(), r = 3 * $("#network_plot").innerHeight(); let a = document.createElement("canvas"), n = a.getContext("2d"); a.width = o, a.height = r; const l = $("#category_dropdown").find(":selected").val(), s = $("#network_dropdown").find(":selected").val(), i = $("#module_dropdown").find(":selected").val(), d = $("#text-box_genes-range").val(); var p = new Date; const c = l + "_" + s + "_" + i + "_" + d + "genes_" + (p.getDay() + "-" + p.getMonth() + "-" + p.getFullYear()) + ".png"; let u = new Image; u.onload = function () { if (n.clearRect(0, 0, o, r), n.rect(0, 0, o, r), n.fillStyle = "white", n.fill(), n.drawImage(u, 0, 0, o, r), a.msToBlob) alert("This feature is only available on Chrome and Firefox."); else { let e = document.createElement("a"); e.setAttribute("download", c), e.setAttribute("href", a.toDataURL("image/png", 1).replace("image/png", "image/octet-stream")); let t = new MouseEvent("click"); e.dispatchEvent(t) } }, u.src = "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(t))), $("body").removeClass("loading") }, API.prototype.downloadSVGData = function () { const e = XLSX.utils.json_to_sheet(SVGData.nodes, { header: Object.keys(SVGData.nodes[1]) }), t = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(t, e, "CoExpData"); const o = $("#category_dropdown").find(":selected").val(), r = $("#network_dropdown").find(":selected").val(), a = $("#module_dropdown").find(":selected").val(), n = $("#text-box_genes-range").val(); var l = new Date; const s = o + "_" + r + "_" + a + "_" + n + "genes_" + (l.getDay() + "-" + l.getMonth() + "-" + l.getFullYear()) + ".xlsx"; XLSX.writeFile(t, s) }, API.prototype.getMM = function (e, t, o) { void 0 === t || void 0 === e || void 0 === o ? alert("No data received.") : $.ajax({ url: "/" + environment + "/API/GetMM?Category=" + t + "&Network=" + e + "&ModuleColor=" + o, type: "GET", success: function (r) { $("#goFromTissue_divError").hide(), console.log(r); var a = [], n = JSON.parse(r); a.push(["ensgene", "name", "module", "mm"]), $.each(n, function (e, t) { var o = []; $.each(t, function (e, t) { o.push(t) }), a.push(o) }); var l = new Date, s = l.getDay() + "-" + l.getMonth() + "-" + l.getFullYear(), i = t + "_" + e + "_" + o + "_" + s + ".xlsx"; "undefined" != typeof console && console.log(new Date); var d = XLSX.utils.book_new(), p = XLSX.utils.aoa_to_sheet(a); XLSX.utils.book_append_sheet(d, p, "FreakySheet"), "undefined" != typeof console && console.log(new Date), XLSX.writeFile(d, i), "undefined" != typeof console && console.log(new Date) }, error: function (e) { console.log(e) } }) }, API.prototype.sendFeedback = function () { let e = $("#feedback_comments").val(), t = $("input[name=feedback_radio]:checked").val(), o = $("#feedback_name").val(), r = $("#feedback_email").val(); "" == o ? alert("Please, introduce your name.") : "" == r ? alert("Please, introduce your email.") : "" == e ? alert("Please, introduce your comments.") : /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(r) ? $.ajax({ url: "/" + environment + "/API/SendFeedback?Name=" + o + "&Address=" + r + "&Subject=CoExp_Feedback&Content=" + e + "&LevelSatisfaction=" + t, type: "GET", success: function (e) { alert("Your feedback has been successfully sent! Thanks for taking the time to provide it!\n"), $("#close_feedback").trigger("click") }, error: function (e) { alert("Sorry, an error has occurred. You may have entered an invalid e-mail address. Please, try it again."), console.log(e) } }) : alert("You have entered an invalid e-mail address. Please, try it again.") }, API.prototype.arrayDiff = function (e, t) { var o = []; for (var r in e) -1 == t.indexOf(e[r]) && o.push(e[r]); return o }, API.prototype.checkGenesFound = function (e) { var t = _.keys(_.countBy(JSON.parse(e), function (e) { return e.gene })), o = $("#genes").val(); o = o.indexOf(", ") > -1 ? o.split(", ") : o.indexOf(",") > -1 ? o.split(",") : o.indexOf(" ") > -1 ? o.split(" ") : [o]; var r = API.prototype.arrayDiff(o, t); if (r.length > 0) { $("#table_genes_not_found").find("tbody tr").remove(), $("#genes_not_found").find(".modal-header .text-left h4").empty(), $("#genes_not_found").find(".modal-header .text-left h4").next().next(); var a = "", n = _.countBy(r); for (var l in r) n[r[l]] > 1 ? a += "<tr><td>" + r[l] + "</td><td>Duplicated</td></tr>" : a += "<tr><td>" + r[l] + "</td><td>Not found in any selected network</td></tr>"; var s = "Input Gene List (" + (o.length - r.length) + "/" + o.length + ")", i = "Genes Not Found (" + r.length + "/" + o.length + ")"; $("#genes_not_found").find(".modal-header .text-left h4").first().append(s), $("#genes_not_found").find(".modal-header .text-left h4").next().next().append(i), $("#table_genes_not_found").find("tbody").append(a), $("#genes_not_found").modal("show") } else $("#globalReportOnGenes_div").show(), $("#empty-initial-results").hide(), $("#error").hide() }, API.prototype.genesNotFoundAction = function (e) { "continue" == e ? ($("#globalReportOnGenes_div").show(), $("#empty-initial-results").hide(), $("#error").hide()) : $("#empty-initial-results").show(), $("#genes_not_found").modal("hide") };
