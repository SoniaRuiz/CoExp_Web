let API = function () { this.SVGData = "" }; API.prototype.menuInit = function (e) { if (1 == e) $("#send_button").prop("disabled", !0), API.prototype.getNetworkCategories(), $("#network").prop("disabled", !0).selectpicker("refresh"), $("#module_selection").prop("disabled", !0).selectpicker("refresh"), $("#goFromTissue_div").hide(), $("#cellType_div").hide(), $("#error").hide(); else if (11 == e) { $("#send_button").prop("disabled", !0); const t = $("#Category").val(), o = $("#Network").val(), a = $("#ModuleColor").val(); API.prototype.getNetworkCategories(t), API.prototype.getAvailableNetworks(t, o), $("#category").prop("disabled", !0).selectpicker("refresh"), $("#network").prop("disabled", !0).selectpicker("refresh"), $("#module_selection").selectpicker("val", ["1", "2"]).prop("disabled", !0).selectpicker("refresh"), $("#send_button").prop("disabled", !0), $("body").addClass("loading"), API.prototype.sendButtonFunction(e, a) } else 2 == e || 3 == e ? API.prototype.getTreeMenuData() : 4 == e && (API.prototype.getNetworkCategories(), $("#network").prop("disabled", !0).selectpicker("refresh"), $("#module_selection").prop("disabled", !0), $("#genes-range").prop("disabled", !0), $("#text-box_genes-range").prop("disabled", !0), $("#slider-range-treshold").prop("disabled", !0), $("#threshold_network").prop("disabled", !0), $("#send_button").prop("disabled", !0), $("#save_plot").prop("disabled", !0), $("#save_data").prop("disabled", !0)); $("#category").on("change", function () { $("#network").children().remove(), API.prototype.getAvailableNetworks(this.value), $("#network").prop("disabled", !1).selectpicker("refresh"), $("#send_button").prop("disabled", !0), 1 == e ? ($("#tabs").hide(), $("#goFromTissue_div").hide(), $("#cellType_div").hide(), $("#module_selection").selectpicker("deselectAll").prop("disabled", !0).selectpicker("refresh")) : 2 == e && ($("#genes").val(""), $("#genes").prop("disabled", !0)) }), $("#network").on("change", function () { 1 == e ? $("#module_selection").prop("disabled", !1).selectpicker("refresh") : 2 == e ? ($("#genes").val(""), $("#genes").prop("disabled", !1)) : 4 == e && ($("#module_selection").prop("disabled", !1), $("#genes-range").prop("disabled", !1), $("#text-box_genes-range").prop("disabled", !1), $("#send_button").prop("disabled", !1)) }), $("#module_selection").on("change", function () { $("#send_button").prop("disabled", !1) }), $("#send_button").on("click", function () { API.prototype.sendButtonFunction(e) }), $("#save_plot").on("click", function () { API.prototype.downloadSVGPlot() }), $("#save_data").on("click", function () { API.prototype.downloadSVGData() }), $("#goFromTissue_table").on("click", "td.details-control", function () { const e = $(this).closest("tr"), t = $("#goFromTissue_table").DataTable().row(e); t.child.isShown() ? (t.child.hide(), e.removeClass("shown")) : API.prototype.hideRowsGOFromTissue(t.data(), e, t) }), $("#globalReportOnGenes_table, #globalSummariseReportOnGenes_table, #reportOnGenes_table, #summariseClustering_table").on("click", "td.details-control", function () { const e = $(this).closest("tr"), t = $(this).closest("table")[0].id, o = $("#" + t).DataTable().row(e); o.child.isShown() ? (o.child.hide(), e.removeClass("shown")) : API.prototype.hideRowsReportOnGenes(o.data(), e, o, t) }) }, API.prototype.getNetworkCategories = function (e) { if (void 0 === e && (e = null), null != e) { const t = '<option value="' + e + '" selected>' + e + "</option>"; $("#category").append(t).selectpicker("refresh") } else $.ajax({ url: "/" + environment + "/API/GetNetworkCategories", type: "GET", success: function (e) { if (e.indexOf("Problems") >= 0) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>" + e + "</p>"), $("#goFromTissue_divError").show(); else if ("{}" == e) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>No data has been received!</p>"), $("#goFromTissue_divError").show(); else { $("#goFromTissue_divError").hide(), console.log(e), e = JSON.parse(e); for (let t = 0; t < e.length; t++) { const o = '<option value="' + e[t] + '">' + e[t] + "</option>"; $("#category").append(o).selectpicker("refresh") } } }, error: function (e) { console.log(e) } }) }, API.prototype.getAvailableNetworks = function (e, t) { if (void 0 === t && (t = null), null != t) { const e = '<option value="' + t + '" selected>' + t + "</option>"; $("#network").append(e).selectpicker("refresh") } else $.ajax({ url: "/" + environment + "/API/GetAvailableNetworks?Category=" + e, type: "GET", success: function (e) { if (e.indexOf("Problems") >= 0) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>" + e + "</p>"), $("#goFromTissue_divError").show(); else if ("{}" == e) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>No data has been received!</p>"), $("#goFromTissue_divError").show(); else { $("#goFromTissue_divError").hide(), console.log(e), e = JSON.parse(e); for (let t = 0; t < e.length; t++) { const o = '<option value="' + e[t] + '">' + e[t] + "</option>"; $("#network").append(o).selectpicker("refresh") } } }, error: function (e) { console.log(e) } }) }, API.prototype.getTreeMenuData = function () { $.ajax({ url: "/" + environment + "/API/GetTreeMenuData", type: "GET", success: function (e) { console.log(e), e.indexOf("Problems") >= 0 ? ($("#error").children("p").remove(), $("#error").append("<p>" + e + "</p>"), $("#error").show()) : (simTree({ el: "#tree", data: JSON.parse(e), check: !0, linkParent: !0, expand: "expand", onClick: function (e) { e.length > 0 && $("#genes").prop("disabled", !1) } }), $("ul.show").removeClass("show"), $("li[data-id = '100']").closest("ul").first().addClass("show"), $("li[data-id = '1']").closest("ul").addClass("show"), $("ul.sim-tree").find("i.sim-tree-checkbox").first().addClass("sim-tree-semi"), $("li[data-id = '1']").find("i.sim-tree-checkbox").first().addClass("sim-tree-semi"), $("li[data-id = '100']").find("i.sim-tree-checkbox").first().addClass("checked")) }, error: function (e) { console.log(e) } }) }, API.prototype.sendButtonFunction = function (e, t) { if (void 0 === t && (t = null), $("body").addClass("loading"), 1 == e || 11 == e) { $("#error").hide(); const e = $("#module_selection").val(); $("body").addClass("loading"), $("#goFromTissue_table tr").length > 1 && ($("#goFromTissue_table").DataTable().destroy(), $("#goFromTissue_table").remove("tbody"), $("#goFromTissue_div").hide()), $("#cellType_table tr").length > 1 && ($("#cellType_table").DataTable().destroy(), $("#cellType_table").children().remove(), $("#cellType_div").hide()), $("body").addClass("loading"), 1 == e.length ? "1" == e[0] ? (API.prototype.getGOFromTissue($("#category").val(), $("#network").val(), t), $("#cellType_div").hide(), $('.nav-tabs a[href="#tab1"]').tab("show"), $('.nav-tabs a[href="#tab1"]').tab().show(), $('.nav-tabs a[href="#tab2"]').tab().hide()) : (API.prototype.getCellTypeFromTissue($("#category").val(), $("#network").val(), t), $("#goFromTissue_div").hide(), $('.nav-tabs a[href="#tab2"]').tab("show"), $('.nav-tabs a[href="#tab2"]').tab().show(), $('.nav-tabs a[href="#tab1"]').tab().hide()) : 2 == e.length ? (API.prototype.getGOFromTissue($("#category").val(), $("#network").val(), t), API.prototype.getCellTypeFromTissue($("#category").val(), $("#network").val(), t), $('.nav-tabs a[href="#tab1"]').tab("show"), $('.nav-tabs a[href="#tab1"]').tab().show(), $('.nav-tabs a[href="#tab2"]').tab().show()) : ($("#goFromTissue_div").hide(), $("#cellType_div").hide(), $("#error").show(), $("body").removeClass("loading")) } else if (2 == e || 3 == e) if ("" == $("#genes").val()) alert("Please, enter your gene set."), $("body").removeClass("loading"); else if (0 == $("i.checked").length) alert("Please, select your preferred network."), $("body").removeClass("loading"); else { $("body").addClass("loading"), $("genes").focus(), 2 == e ? ($("#reportOnGenes_div").hide(), $("#summariseClustering_div").hide(), $("#reportOnGenes_table tr").length > 1 && $("#reportOnGenes_table").DataTable().destroy(), $("#summariseClustering_table tr").length > 1 && $("#summariseClustering_table").DataTable().destroy()) : 3 == e && ($("#globalReportOnGenes_div").hide(), $("#globalSummariseReportOnGenes_div").hide(), $("#globalReportOnGenes_table tr").length > 1 && $("#globalReportOnGenes_table").DataTable().destroy(), $("#globalSummariseReportOnGenes_table tr").length > 1 && $("#globalSummariseReportOnGenes_table").DataTable().destroy()); let t = []; const o = $("i.checked").closest("li [data-level*=2]"); for (let e = 0; e < o.length; e++) { const a = $(o[e]).children().eq(1).text(), r = $(o[e]).children("ul").find("i.checked").parent(); let n = null; r.each(function (e, t) { n = 0 == e ? t.innerText : n + "," + t.innerText }), t[e] = a + "|" + n + "**" } if ($("#genes").val().indexOf('"') > -1) alert("Please, introduce your non-quoted genes using one of the following formats:\nComma-separated: GENE1,GENE2\nSpace-separated: GENE1 GENE2\nComma and space sparated: GENE1, GENE2"), $("#genes").val(""), $("body").removeClass("loading"); else if ($("#genes").val().indexOf("  ") > -1) alert("Please, introduce your non-quoted genes using one of the following formats:\nComma-separated: GENE1,GENE2\nSpace-separated: GENE1 GENE2\nComma and space sparated: GENE1, GENE2"), $("#genes").val(""), $("body").removeClass("loading"); else if ($("#genes").val().indexOf("{") > -1 || $("#genes").val().indexOf("}") > -1) alert("Please, introduce your non-quoted genes using one of the following formats:\nComma-separated: GENE1,GENE2\nSpace-separated: GENE1 GENE2\nComma and space sparated: GENE1, GENE2"), $("#genes").val(""), $("body").removeClass("loading"); else if ($("#genes").val().indexOf("[") > -1 || $("#genes").val().indexOf("]") > -1) alert("Please, introduce your non-quoted genes using one of the following formats:\nComma-separated: GENE1,GENE2\nSpace-separated: GENE1 GENE2\nComma and space sparated: GENE1, GENE2"), $("#genes").val(""), $("body").removeClass("loading"); else if ($("#genes").val().indexOf("\n") > -1) { const o = $("#genes").val().replace(/\n/g, " "); 2 == e ? API.prototype.reportOnGenesMultipleTissue(t, o) : 3 == e && API.prototype.globalReportOnGenes(t, o) } else 2 == e ? API.prototype.reportOnGenesMultipleTissue(t, $("#genes").val()) : 3 == e && API.prototype.globalReportOnGenes(t, $("#genes").val()) } else 4 == e && (API.prototype.generateGraph(), $("body").removeClass("loading"), $("#save_plot").prop("disabled", !1), $("#save_data").prop("disabled", !1)) }, API.prototype.getGOFromTissue = function (e, t, o) { void 0 === o && (o = null), $.ajax({ url: "/" + environment + "/API/GetGOFromTissue?Category=" + e + "&Network=" + t, type: "GET", success: function (e) { if (e.indexOf("Problems") >= 0) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>" + e + "</p>"), $("#goFromTissue_divError").show(); else if ("{}" == e) $("#goFromTissue_divError").children("p").remove(), $("#goFromTissue_divError").append("<p>No data has been received!</p>"), $("#goFromTissue_divError").show(); else { console.log(e), e = JSON.parse(e); for (let t = 0; t < e.length; t++)0 === e[t].p_value && (e.splice(t, 1), t--); $("#goFromTissue_table").DataTable({ data: e, deferRender: !0, columns: [{ className: "details-control", orderable: !1, data: null, defaultContent: "" }, { data: "query_number" }, { data: "p_value" }, { data: "query_size" }, { data: "term_id", visible: !1, searchable: !0 }, { data: "domain" }, { data: "term_name" }, { data: "intersection", visible: !1, searchable: !0 }], order: [[2, "asc"]], dom: "Bfrtip", buttons: ["copy", "excel", "print"] }), null != o && $("#goFromTissue_table").DataTable().columns(1).search("^" + o + "$", !0, !1).draw(), $("#goFromTissue_divError").hide(), $("#goFromTissue_div").show() } $("body").removeClass("loading"), $("#tabs").show() }, error: function (e) { console.log(e), $("body").removeClass("loading") } }) }, API.prototype.getCellTypeFromTissue = function (e, t, o) { void 0 === o && (o = null), $.ajax({ url: "/" + environment + "/API/GetCellTypeFromTissue?Category=" + e + "&Network=" + t, type: "GET", success: function (e) { if (e.indexOf("Problems") >= 0) $("#cellType_divError").children("p").remove(), $("#cellType_divError").append("<p>" + e + "</p>"), $("#cellType_divError").show(); else if ("{}" == e) $("#cellType_divError").children("p").remove(), $("#cellType_divError").append("<p>No data has been received!</p>"), $("#cellType_divError").show(); else { console.log(e); let t = [], a = null; data = JSON.parse(e); for (let e = 0; e < data.length; e++)a = Object.keys(data[e]).sort(), data[e] = JSON.parse(JSON.stringify(data[e], a)); columnNames = Object.keys(data[0]); for (let e in columnNames) if (null != o) if (0 == e || columnNames[e] == o) t.push({ data: columnNames[e], title: columnNames[e] }); else for (let t = 0; t < data.length; t++)delete data[t][columnNames[e]]; else t.push({ data: columnNames[e], title: columnNames[e] }); if (null == o) { let e = !1; for (let o = 1; o < t.length; o++) { for (let a = 0; a < data.length; a++)if (1 !== data[a][t[o]]) { e = !0; break } if (!e) for (let e = 0; e < data.length; e++)delete data[e][t[o]]; e = !1 } hasPvalue = !1; for (let e = 0; e < data.length; e++) { for (let o = 1; o < t.length; o++)if (1 !== data[e][Object.keys(data[e])[o]] && 0 !== data[e][Object.keys(data[e])[o]]) { hasPvalue = !0; break } hasPvalue || (data.splice(e, 1), e--), hasPvalue = !1 } } else for (let e = 0; e < data.length; e++)for (let o = 1; o < t.length; o++)1 !== data[e][Object.keys(data[e])[o]] && 0 !== data[e][Object.keys(data[e])[o]] || (data.splice(e, 1), e--); null == data[0] ? $("#cellType_div").append("<p>The module '" + o + "' does not have any significant p-values over any cell type.</p>") : ($("#cellType_table").DataTable({ colReorder: !0, deferRender: !0, data: data, columns: t, dom: "Bfrtip", autoWidth: !1, columnDefs: [{ targets: 1, className: "noVis" }], buttons: ["copy", "excel", "print"], drawCallback: function () { $("#cellType_table").find("td:not(:first-child):contains(.)").css("backgroundColor", "yellow") }, scrollX: !0, paging: !0, scrollCollapse: !0 }).on("search.dt", function () { $("#cellType_table").DataTable().columns({ filter: "applied" }).every(function () { 1 != this.data().unique().length || "1" != this.data().unique()[0] && "0" != this.data().unique()[0] ? this.visible(!0) : this.visible(!1) }) }), $("#cellType_table").DataTable().draw()), $("#cellType_div").show(), $("#cellType_divError").hide(), $("#cellType_table").DataTable().draw() } $("body").removeClass("loading"), $("#tabs").show() }, error: function (e) { console.log(e), $("body").removeClass("loading") } }) }, API.prototype.reportOnGenesMultipleTissue = function (e, t) { try { $.ajax({ url: "/" + environment + "/API/PostReportOnGenesMultipleTissue", data: JSON.stringify({ MultipleSelectionData: e, Genes: t }), method: "POST", dataType: "json", contentType: "application/json", success: function (e) { if (e.indexOf("Problems") >= 0) $("#error").children("p").remove(), $("#error").append("<p>" + e + "</p>"), $("#error").show(); else { console.log(e); const t = _.groupBy(JSON.parse(e), function (e) { return e.network + "_" + e.module }), o = _.map(t, function (e) { return { network: e[0].network, category: e[0].category, module: e[0].module, gene: _.pluck(e, "gene"), fisher: e[0].fisher, size: e[0].size, go_report: e[0].go_report, cell_type_pred: e[0].cell_type_pred } }); $("#summariseClustering_table").DataTable({ data: o, deferRender: !0, columns: [{ className: "details-control", orderable: !1, data: null, defaultContent: "" }, { data: "network" }, { data: "category" }, { data: "module", render: function (e, t, o, a) { return "display" === t && (e = "<a href=\"javascript:API.prototype.searchByModuleColor('" + e + "','" + o.category + "','" + o.network + '\');" title="Find out more ...">' + e + "</a>"), e } }, { data: "gene", title: "overlap", render: function (e, t, o, a) { return e.length } }, { data: "gene", visible: !1, searchable: !0 }, { data: "fisher" }, { data: "size" }, { data: "go_report", visible: !1, searchable: !0 }, { data: "cell_type_pred", visible: !1, searchable: !0 }], order: [[5, "asc"]], dom: "Bfrtip", buttons: ["copy", "excel", "print", { text: "EXPAND RESULTS", action: function (e, t, o, a) { $("#summariseClustering_div").hide(), $("#reportOnGenes_div").show() } }] }), $("#reportOnGenes_table").DataTable({ data: JSON.parse(e), deferRender: !0, columns: [{ className: "details-control", orderable: !1, data: null, defaultContent: "" }, { data: "gene" }, { data: "category" }, { data: "network" }, { data: "ensgene" }, { data: "fisher" }, { data: "module", render: function (e, t, o, a) { return "display" === t && (e = "<a href=\"javascript:API.prototype.searchByModuleColor('" + e + "','" + o.category + "','" + o.network + '\');" title="Find out more ...">' + e + "</a>"), e } }, { data: "mm" }, { data: "size" }, { data: "go_report", visible: !1, searchable: !0 }, { data: "cell_type_pred", visible: !1, searchable: !0 }], order: [[4, "asc"]], dom: "Bfrtip", buttons: ["copy", "excel", "print", { text: "SUMMARISE CLUSTERING", action: function (e, t, o, a) { $("#reportOnGenes_div").hide(), $("#summariseClustering_div").show() } }] }), $("#reportOnGenes_div").show(), $("#error").hide() } $("body").removeClass("loading") }, error: function (e) { console.log(e) } }) } catch (e) { $("body").removeClass("loading") } }, API.prototype.globalReportOnGenes = function (e, t) { try { $.ajax({ url: "/" + environment + "/API/PostGlobalReportOnGenes", data: JSON.stringify({ MultipleSelectionData: "{" + e + "}", Genes: t }), method: "POST", contentType: "application/json", success: function (e) { if (e.indexOf("Problems") >= 0) $("#error").children("p").remove(), $("#error").append("<p>" + e + "</p>"), $("#error").show(); else { console.log(e); const t = _.groupBy(JSON.parse(e), function (e) { return e.network + "_" + e.module }), o = _.map(t, function (e) { return { network: e[0].network, category: e[0].category, module: e[0].module, gene: _.pluck(e, "gene"), fisher: e[0].fisher, FDR: e[0].FDR, Bonferroni: e[0].Bonferroni, size: e[0].size, go_report: e[0].go_report, cell_type_pred: e[0].cell_type_pred } }); $("#globalSummariseReportOnGenes_table").DataTable({ data: o, deferRender: !0, columns: [{ className: "details-control", orderable: !1, data: null, defaultContent: "" }, { data: "network" }, { data: "category" }, { data: "module", render: function (e, t, o, a) { return "display" === t && (e = "<a href=\"javascript:API.prototype.searchByModuleColor('" + e + "','" + o.category + "','" + o.network + '\');" title="Find out more ...">' + e + "</a>"), e } }, { data: "gene", title: "overlap", render: function (e, t, o, a) { return e.length } }, { data: "gene", visible: !1, searchable: !0 }, { data: "fisher" }, { data: "FDR" }, { data: "Bonferroni" }, { data: "size" }, { data: "go_report", visible: !1, searchable: !0 }, { data: "cell_type_pred", visible: !1, searchable: !0 }], order: [[5, "asc"]], dom: "Bfrtip", buttons: ["copy", "excel", "print", { text: "EXPAND RESULTS", action: function (e, t, o, a) { $("#globalSummariseReportOnGenes_div").hide(), $("#globalReportOnGenes_div").show() } }] }), $("#globalReportOnGenes_table").DataTable({ data: JSON.parse(e), deferRender: !0, columns: [{ className: "details-control", orderable: !1, data: null, defaultContent: "" }, { data: "gene" }, { data: "category" }, { data: "network" }, { data: "ensgene" }, { data: "fisher" }, { data: "FDR" }, { data: "Bonferroni" }, { data: "module", render: function (e, t, o, a) { return "display" === t && (e = "<a href=\"javascript:API.prototype.searchByModuleColor('" + e + "','" + o.category + "','" + o.network + '\');" title="Find out more ...">' + e + "</a>"), e } }, { data: "mm" }, { data: "size" }, { data: "go_report", visible: !1, searchable: !0 }, { data: "cell_type_pred", visible: !1, searchable: !0 }], order: [[4, "asc"]], dom: "Bfrtip", buttons: ["copy", "excel", "print", { text: "SUMMARISE CLUSTERING", action: function (e, t, o, a) { $("#globalReportOnGenes_div").hide(), $("#globalSummariseReportOnGenes_div").show() } }] }), $("#globalReportOnGenes_div").show(), $("#error").hide() } $("body").removeClass("loading") }, error: function (e) { console.log(e) } }) } catch (e) { $("body").removeClass("loading") } }, API.prototype.searchByModuleColor = function (e, t, o) { window.open(url = "/" + environment + "/Run/Catalog?category=" + t + "&network=" + o + "&modulecolor=" + e, name = "_blank", specs = "resizable=no,top=300,left=500,width=700,height=700,scrollbars=yes") }, API.prototype.hideRowsGOFromTissue = function (e, t, o) { const a = e.term_id.split(":"), r = a[1]; let n = "", l = "", s = ""; "GO" == a[0] ? (n = "/" + environment + "/API/GetInfoFromQuickGO", l = e.term_id) : "REAC" == a[0] ? (n = "/" + environment + "/API/GetInfoFromREACTOME", l = a[1]) : (n = "/" + environment + "/API/GetInfoFromKEGG", l = a[1]), e.intersection.indexOf(", ") >= 0 ? s = e.intersection.split(", ") : e.intersection.indexOf(" ") >= 0 && (s = e.intersection.split(" ")); let i = null; for (let e = 0; e < s.length; e++) { const t = "https://snca.atica.um.es/browser/app/vizER/?gene=" + s[e], o = "https://gtexportal.org/home/gene/" + s[e], a = "https://www.genecards.org/cgi-bin/carddisp.pl?gene=" + s[e]; let r = 'Check in splicing reads in <a href="' + t + '" target="_blank">vizER</a>.<br/>'; r = (r = r + 'Check expression in <a href="' + o + '" target="_blank">GTEx</a>.<br/>') + 'Check gene details in <a href="' + a + '" target="_blank">GeneCards</a>.', i = 0 == e ? "<a href='#' id='" + s[e] + "' data-html='true' data-trigger='click' data-placement='bottom' title='" + s[e] + "' data-content='" + r + "'>" + s[e] + "</a>" : i + ", <a href='#' id='" + s[e] + "' data-html='true' data-trigger='click' data-placement='bottom' title='" + s[e] + "' data-content='" + r + "'>" + s[e] + "</a>" } $.ajax({ url: n, type: "POST", data: { term: l }, success: function (n) { n = JSON.parse(n); let l = null; if ("GO" == a[0] && n.results.length > 0) { const t = "<b>Id: </b> " + (n = n.results[0]).id + "<br/><b>Name: </b> " + n.name + "<br/><b>Aspect: </b> " + n.aspect + "<br/><b>Definition: </b> " + n.definition.text + "<br/>"; l = "<a id='" + r + "' href='#' data-trigger='hover' data-html='true' data-placement='bottom' title='" + e.term_id + "' data-content='" + t + "'>" + e.term_id + "</a>" } else if ("REAC" == a[0] && null != n.dbId) { console.log(n); let t = ""; n.isInDisease ? t = "<br/><b>Disease: </b> (" + n.disease[0].displayName + ") " + n.disease[0].definition + "<br/>" : null != n.goBiologicalProcess && (t = "<br/><b>Biological Process: </b> " + n.goBiologicalProcess.definition + "<br/>"); const o = "<b>Id: </b> " + e.term_id + "<br/><b>Name: </b> " + n.displayName + "<br/><b>Species: </b> " + n.speciesName + t; l = "<a id='" + r + "' href='#' data-trigger='hover' data-html='true' data-placement='bottom' title='" + e.term_id + "' data-content='" + o + "'>" + e.term_id + "</a>" } else if ("KEGG" == a[0] && n.length > 0) { let t = ""; if ("" != (n = n[0]).description) t = "<b>Description: </b> " + n.description + "<br/>"; else if ("" != n.diseases) { t += "<b>Diseases: </b> "; for (let e in n.diseases) t = t + n.diseases[e] + "<br/>" } const o = "<b>Id: </b> " + n.entry_id + "<br/><b>Name: </b> " + n.name + "<br/>" + t; l = "<a id='" + r + "' href='#' data-trigger='hover' data-html='true' data-placement='bottom' title='" + e.term_id + "' data-content='" + o + "'>" + e.term_id + "</a>" } const s = '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;"><tr><td>term_id: </td><td>' + l + "</td></tr><tr><td>genes: </td><td>" + i + "</td></tr></table>"; o.child(s).show(), t.addClass("shown"), $("[data-placement='bottom']").popover() }, error: function () { return "No results found!" } }) }, API.prototype.hideRowsReportOnGenes = function (e, t, o, a) { let r = "", n = e.go_report; const l = e.go_report.match(/GO:[0-9]*/g); if (null != l) for (let e = 0; e < l.length; e++)n = n.replace(l[e], "<a id='" + l[e] + "' href='#' onmouseover='javascript:API.prototype.getCardData(\"" + l[e] + "\")' data-placement='bottom' data-trigger='hover' data-html='true' title='" + l[e] + "' data-content='<div class=\"loader\"></div>'>" + l[e] + "</a>"); else n = "no data"; if (a.toLowerCase().indexOf("summarise") >= 0) { let t = null; for (let o = 0; o < e.gene.length; o++) { const a = "https://snca.atica.um.es/browser/app/vizER/?gene=" + e.gene[o], r = "https://gtexportal.org/home/gene/" + e.gene[o], n = "https://www.genecards.org/cgi-bin/carddisp.pl?gene=" + e.gene[o]; let l = 'Check in splicing reads in <a href="' + a + '" target="_blank">vizER</a>.<br/>'; l = (l = l + 'Check expression in <a href="' + r + '" target="_blank">GTEx</a>.<br/>') + 'Check gene details in <a href="' + n + '" target="_blank">GeneCards</a>.', t = 0 == o ? "<a href='#' id='" + e.gene[o] + "' data-html='true' data-trigger='click' data-placement='bottom' title='" + e.gene[o] + "' data-content='" + l + "'>" + e.gene[o] + "</a>" : t + ", <a href='#' id='" + e.gene[o] + "' data-html='true' data-trigger='click' data-placement='bottom' title='" + e.gene[o] + "' data-content='" + l + "'>" + e.gene[o] + "</a>" } r = "<tr><td>genes: </td><td>" + t + "</td></tr>" } const s = '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">' + r + "<tr><td>go_report: </td><td>" + n + "</td></tr><tr><td>cell_type_pred: </td><td>" + e.cell_type_pred + "</td></tr></table>"; o.child(s).show(), t.addClass("shown"), $("[data-placement='bottom']").popover() }, API.prototype.getCardData = function (e) { let t = "/" + environment + "/API/GetInfoFromQuickGO"; $.ajax({ url: t, type: "POST", data: { term: e }, success: function (e) { if ((e = JSON.parse(e)).results.length > 0) { const t = "<b>Id: </b> " + (e = e.results[0]).id + "<br/><b>Name: </b> " + e.name + "<br/><b>Aspect: </b> " + e.aspect + "<br/><b>Definition: </b> " + e.definition.text + "<br/>", o = this.data.split("%3A")[1]; $("a[id*='" + o + "']").attr("data-content", t) } }, error: function () { return "No results found!" } }) }, API.prototype.generateGraph = function () { $("#network_plot").html(""); const e = $("#network").find(":selected").val(), t = $("#module_color").find(":selected").val(), o = $("#text_box_name").val(), a = "/" + environment + "/API/GetTomDataBRAINEAC?moduleColor=" + t + "&network=" + e + "&top=" + o; $.ajax({ url: a, type: "GET", success: function (e) { console.log(JSON.parse(e)), e = JSON.parse(e), net_plot(e), SVGData = e, $("#slider-range-treshold").prop("disabled", !1), $("#threshold_network").prop("disabled", !1) }, error: function () { } }) }, API.prototype.downloadSVGPlot = function () { const e = document.getElementsByTagName("svg")[0]; e.setAttribute("xlink", "http://www.w3.org/1999/xlink"); let t = (new XMLSerializer).serializeToString(e); t = (t = t.replace(/(\w+)?:?xlink=/g, "xmlns:xlink=")).replace(/NS\d+:href/g, "xlink:href"); let o = document.createElement("canvas"), a = o.getContext("2d"); o.width = 800, o.height = 600; let r = new Image; r.onload = function () { if (a.clearRect(0, 0, 800, 600), a.rect(0, 0, 800, 600), a.fillStyle = "white", a.fill(), a.drawImage(r, 0, 0, 800, 600), o.msToBlob) alert("This feature is only available on Chrome and Firefox."); else { let e = document.createElement("a"); e.setAttribute("download", "coexpgraph.png"), e.setAttribute("href", o.toDataURL("image/png").replace("image/png", "image/octet-stream")); let t = new MouseEvent("click"); e.dispatchEvent(t) } }, r.src = "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(t))) }, API.prototype.downloadSVGData = function () { SVGData.results.unshift(SVGData.columns); const e = XLSX.utils.json_to_sheet(SVGData.results, { skipHeader: !0 }), t = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(t, e, "CoExpData"), XLSX.writeFile(t, "coexpdata.xlsx") };